<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">

	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawVectorVisualization</Title>
			<Shortcut>drawVectorVisualization</Shortcut>
			<Description>Draw a VectorVisualization in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 vectorStartPos_of_$name$ = $end$;
					Vector3 vectorEndPos_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Vector(vectorStartPos_of_$name$, vectorEndPos_of_$name$, color_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn VectorVisualization</ToolTip>
					<Default>vectorVisualization</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawVectorFromVisualization</Title>
			<Shortcut>drawVectorFromVisualization</Shortcut>
			<Description>Draw a VectorFromVisualization in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 vectorStartPos_of_$name$ = $end$;
					Vector3 vector_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.VectorFrom(vectorStartPos_of_$name$, vector_of_$name$, color_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn VectorFromVisualization</ToolTip>
					<Default>vectorFromVisualization</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawVectorToVisualization</Title>
			<Shortcut>drawVectorToVisualization</Shortcut>
			<Description>Draw a VectorToVisualization in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 vector_of_$name$ = $end$;
					Vector3 vectorEndPos_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.VectorTo(vector_of_$name$, vectorEndPos_of_$name$, color_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn VectorToVisualization</ToolTip>
					<Default>vectorToVisualization</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawPositionVisualization_go</Title>
			<Shortcut>drawPositionVisualization_go</Shortcut>
			<Description>Draw a PositionVisualization in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.Position(gameObject_of_$name$, color_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn PositionVisualization</ToolTip>
					<Default>positionVisualization</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawPositionVisualization_tr</Title>
			<Shortcut>drawPositionVisualization_tr</Shortcut>
			<Description>Draw a PositionVisualization in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.Position(transform_of_$name$, color_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn PositionVisualization</ToolTip>
					<Default>positionVisualization</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawPositionVisualization_vec</Title>
			<Shortcut>drawPositionVisualization_vec</Shortcut>
			<Description>Draw a PositionVisualization in the Unity Editor. (of vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 position_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Position(position_of_$name$, color_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn PositionVisualization</ToolTip>
					<Default>positionVisualization</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawVectorVisualizationLocal</Title>
			<Shortcut>drawVectorVisualizationLocal</Shortcut>
			<Description>Draw a VectorVisualizationLocal in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransform_thatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 vectorStartPos_of_$name$ = ;
					Vector3 vectorEndPos_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Vector_local(parentTransform_thatDefinesTheLocalSpace_of_$name$, vectorStartPos_of_$name$, vectorEndPos_of_$name$, color_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn VectorVisualizationLocal</ToolTip>
					<Default>vectorVisualizationLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawVectorFromVisualizationLocal</Title>
			<Shortcut>drawVectorFromVisualizationLocal</Shortcut>
			<Description>Draw a VectorFromVisualizationLocal in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransform_thatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 vectorStartPos_of_$name$ = ;
					Vector3 vector_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.VectorFrom_local(parentTransform_thatDefinesTheLocalSpace_of_$name$, vectorStartPos_of_$name$, vector_of_$name$, color_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn VectorFromVisualizationLocal</ToolTip>
					<Default>vectorFromVisualizationLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawVectorToVisualizationLocal</Title>
			<Shortcut>drawVectorToVisualizationLocal</Shortcut>
			<Description>Draw a VectorToVisualizationLocal in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransform_thatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 vector_of_$name$ = ;
					Vector3 vectorEndPos_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.VectorTo_local(parentTransform_thatDefinesTheLocalSpace_of_$name$, vector_of_$name$, vectorEndPos_of_$name$, color_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn VectorToVisualizationLocal</ToolTip>
					<Default>vectorToVisualizationLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawPositionVisualizationLocal_go</Title>
			<Shortcut>drawPositionVisualizationLocal_go</Shortcut>
			<Description>Draw a PositionVisualizationLocal in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_insideLocalSpace_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.Position_local(gameObject_insideLocalSpace_of_$name$, color_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn PositionVisualizationLocal</ToolTip>
					<Default>positionVisualizationLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawPositionVisualizationLocal_tr</Title>
			<Shortcut>drawPositionVisualizationLocal_tr</Shortcut>
			<Description>Draw a PositionVisualizationLocal in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_insideLocalSpace_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.Position_local(transform_insideLocalSpace_of_$name$, color_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn PositionVisualizationLocal</ToolTip>
					<Default>positionVisualizationLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawPositionVisualizationLocal_vec</Title>
			<Shortcut>drawPositionVisualizationLocal_vec</Shortcut>
			<Description>Draw a PositionVisualizationLocal in the Unity Editor. (of vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransform_thatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 positionToDraw_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Position_local(parentTransform_thatDefinesTheLocalSpace_of_$name$, positionToDraw_of_$name$, color_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn PositionVisualizationLocal</ToolTip>
					<Default>positionVisualizationLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawScale_go</Title>
			<Shortcut>drawScale_go</Shortcut>
			<Description>Draw a Scale in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					float lineWidth_of_$name$ = 0.0035f;
					string text_of_$name$ = null;
					bool drawXDim_of_$name$ = true;
					bool drawYDim_of_$name$ = true;
					bool drawZDim_of_$name$ = true;
					float relSizeOfPlanes_of_$name$ = 0.5f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.Scale(gameObject_of_$name$, lineWidth_of_$name$, text_of_$name$, drawXDim_of_$name$, drawYDim_of_$name$, drawZDim_of_$name$, relSizeOfPlanes_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Scale</ToolTip>
					<Default>scale</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawScale_tr</Title>
			<Shortcut>drawScale_tr</Shortcut>
			<Description>Draw a Scale in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_of_$name$ = $end$;
					float lineWidth_of_$name$ = 0.0035f;
					string text_of_$name$ = null;
					bool drawXDim_of_$name$ = true;
					bool drawYDim_of_$name$ = true;
					bool drawZDim_of_$name$ = true;
					float relSizeOfPlanes_of_$name$ = 0.5f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.Scale(transform_of_$name$, lineWidth_of_$name$, text_of_$name$, drawXDim_of_$name$, drawYDim_of_$name$, drawZDim_of_$name$, relSizeOfPlanes_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Scale</ToolTip>
					<Default>scale</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawScale_vec</Title>
			<Shortcut>drawScale_vec</Shortcut>
			<Description>Draw a Scale in the Unity Editor. (of vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 centerPos_of_$name$ = $end$;
					Vector3 scale_of_$name$ = ;
					float lineWidth_of_$name$ = 0.0035f;
					string text_of_$name$ = null;
					Quaternion rotation_of_$name$ = default(Quaternion);
					bool drawXDim_of_$name$ = true;
					bool drawYDim_of_$name$ = true;
					bool drawZDim_of_$name$ = true;
					float relSizeOfPlanes_of_$name$ = 0.5f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.Scale(centerPos_of_$name$, scale_of_$name$, lineWidth_of_$name$, text_of_$name$, rotation_of_$name$, drawXDim_of_$name$, drawYDim_of_$name$, drawZDim_of_$name$, relSizeOfPlanes_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Scale</ToolTip>
					<Default>scale</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawLocalScale_go</Title>
			<Shortcut>drawLocalScale_go</Shortcut>
			<Description>Draw a LocalScale in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_insideLocalSpace_of_$name$ = $end$;
					float lineWidth_inGlobalUnits_of_$name$ = 0.0035f;
					string text_of_$name$ = null;
					bool drawXDim_of_$name$ = true;
					bool drawYDim_of_$name$ = true;
					bool drawZDim_of_$name$ = true;
					float relSizeOfPlanes_of_$name$ = 0.5f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.LocalScale(gameObject_insideLocalSpace_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, drawXDim_of_$name$, drawYDim_of_$name$, drawZDim_of_$name$, relSizeOfPlanes_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn LocalScale</ToolTip>
					<Default>localScale</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawLocalScale_tr</Title>
			<Shortcut>drawLocalScale_tr</Shortcut>
			<Description>Draw a LocalScale in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_insideLocalSpace_of_$name$ = $end$;
					float lineWidth_inGlobalUnits_of_$name$ = 0.0035f;
					string text_of_$name$ = null;
					bool drawXDim_of_$name$ = true;
					bool drawYDim_of_$name$ = true;
					bool drawZDim_of_$name$ = true;
					float relSizeOfPlanes_of_$name$ = 0.5f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.LocalScale(transform_insideLocalSpace_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, drawXDim_of_$name$, drawYDim_of_$name$, drawZDim_of_$name$, relSizeOfPlanes_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn LocalScale</ToolTip>
					<Default>localScale</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawLocalScale_vec</Title>
			<Shortcut>drawLocalScale_vec</Shortcut>
			<Description>Draw a LocalScale in the Unity Editor. (of vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 localPosition_of_$name$ = $end$;
					Vector3 localScale_of_$name$ = ;
					Transform parentTransform_of_$name$ = ;
					Quaternion localRotation_of_$name$ = default(Quaternion);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0035f;
					string text_of_$name$ = null;
					bool drawXDim_of_$name$ = true;
					bool drawYDim_of_$name$ = true;
					bool drawZDim_of_$name$ = true;
					float relSizeOfPlanes_of_$name$ = 0.5f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.LocalScale(localPosition_of_$name$, localScale_of_$name$, parentTransform_of_$name$, localRotation_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, drawXDim_of_$name$, drawYDim_of_$name$, drawZDim_of_$name$, relSizeOfPlanes_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn LocalScale</ToolTip>
					<Default>localScale</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawQuaternion_go</Title>
			<Shortcut>drawQuaternion_go</Shortcut>
			<Description>Draw a Quaternion in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					Vector3 customVectorToRotate_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_of_$name$ = 1.0f;
					Color color_ofTurnAxis_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.QuaternionRotation(gameObject_of_$name$, customVectorToRotate_of_$name$, length_ofUpAndForwardVectors_of_$name$, color_ofTurnAxis_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Quaternion</ToolTip>
					<Default>quaternion</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawQuaternion_tr</Title>
			<Shortcut>drawQuaternion_tr</Shortcut>
			<Description>Draw a Quaternion in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_of_$name$ = $end$;
					Vector3 customVectorToRotate_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_of_$name$ = 1.0f;
					Color color_ofTurnAxis_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.QuaternionRotation(transform_of_$name$, customVectorToRotate_of_$name$, length_ofUpAndForwardVectors_of_$name$, color_ofTurnAxis_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Quaternion</ToolTip>
					<Default>quaternion</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawQuaternion_quat</Title>
			<Shortcut>drawQuaternion_quat</Shortcut>
			<Description>Draw a Quaternion in the Unity Editor. (of quaternion)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Quaternion quaternion_of_$name$ = $end$;
					Vector3 posWhereToDraw_of_$name$ = default(Vector3);
					Vector3 customVectorToRotate_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_of_$name$ = 1.0f;
					Color color_ofTurnAxis_of_$name$ = default(Color);
					float lineWidth_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.QuaternionRotation(quaternion_of_$name$, posWhereToDraw_of_$name$, customVectorToRotate_of_$name$, length_ofUpAndForwardVectors_of_$name$, color_ofTurnAxis_of_$name$, lineWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Quaternion</ToolTip>
					<Default>quaternion</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawQuaternionLocal_go</Title>
			<Shortcut>drawQuaternionLocal_go</Shortcut>
			<Description>Draw a QuaternionLocal in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_insideLocalSpace_of_$name$ = $end$;
					Vector3 customVectorToRotate_local_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_local_of_$name$ = 1.0f;
					Color color_ofTurnAxis_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.QuaternionRotation_local(gameObject_insideLocalSpace_of_$name$, customVectorToRotate_local_of_$name$, length_ofUpAndForwardVectors_local_of_$name$, color_ofTurnAxis_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn QuaternionLocal</ToolTip>
					<Default>quaternionLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawQuaternionLocal_tr</Title>
			<Shortcut>drawQuaternionLocal_tr</Shortcut>
			<Description>Draw a QuaternionLocal in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_insideLocalSpace_of_$name$ = $end$;
					Vector3 customVectorToRotate_local_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_local_of_$name$ = 1.0f;
					Color color_ofTurnAxis_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.QuaternionRotation_local(transform_insideLocalSpace_of_$name$, customVectorToRotate_local_of_$name$, length_ofUpAndForwardVectors_local_of_$name$, color_ofTurnAxis_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn QuaternionLocal</ToolTip>
					<Default>quaternionLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawQuaternionLocal_quat</Title>
			<Shortcut>drawQuaternionLocal_quat</Shortcut>
			<Description>Draw a QuaternionLocal in the Unity Editor. (of quaternion)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransform_thatDefinesTheLocalSpace_of_$name$ = $end$;
					Quaternion quaternionToDraw_local_of_$name$ = ;
					Vector3 posWhereToDraw_global_of_$name$ = default(Vector3);
					Vector3 customVectorToRotate_local_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_local_of_$name$ = 1.0f;
					Color color_ofTurnAxis_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.QuaternionRotation_local(parentTransform_thatDefinesTheLocalSpace_of_$name$, quaternionToDraw_local_of_$name$, posWhereToDraw_global_of_$name$, customVectorToRotate_local_of_$name$, length_ofUpAndForwardVectors_local_of_$name$, color_ofTurnAxis_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn QuaternionLocal</ToolTip>
					<Default>quaternionLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEuler_go</Title>
			<Shortcut>drawEuler_go</Shortcut>
			<Description>Draw an Euler in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					Vector3 customVectorToRotate_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					bool useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$ = false;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation(gameObject_of_$name$, customVectorToRotate_of_$name$, length_ofUpAndForwardVectors_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Euler</ToolTip>
					<Default>euler</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEuler_tr</Title>
			<Shortcut>drawEuler_tr</Shortcut>
			<Description>Draw an Euler in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_of_$name$ = $end$;
					Vector3 customVectorToRotate_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					bool useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$ = false;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation(transform_of_$name$, customVectorToRotate_of_$name$, length_ofUpAndForwardVectors_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Euler</ToolTip>
					<Default>euler</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEuler_vec</Title>
			<Shortcut>drawEuler_vec</Shortcut>
			<Description>Draw an Euler in the Unity Editor. (of vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 eulerAnglesToDraw_of_$name$ = $end$;
					Vector3 posWhereToDraw_of_$name$ = default(Vector3);
					Vector3 customVectorToRotate_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation(eulerAnglesToDraw_of_$name$, posWhereToDraw_of_$name$, customVectorToRotate_of_$name$, length_ofUpAndForwardVectors_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Euler</ToolTip>
					<Default>euler</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEuler_quat</Title>
			<Shortcut>drawEuler_quat</Shortcut>
			<Description>Draw an Euler in the Unity Editor. (of quaternion)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Quaternion quaternionToDrawAsEulerAngles_of_$name$ = $end$;
					Vector3 posWhereToDraw_of_$name$ = default(Vector3);
					Vector3 customVectorToRotate_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation(quaternionToDrawAsEulerAngles_of_$name$, posWhereToDraw_of_$name$, customVectorToRotate_of_$name$, length_ofUpAndForwardVectors_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Euler</ToolTip>
					<Default>euler</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEulerLocal_go</Title>
			<Shortcut>drawEulerLocal_go</Shortcut>
			<Description>Draw an EulerLocal in the Unity Editor. (of gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_insideLocalSpace_of_$name$ = $end$;
					Vector3 customVectorToRotate_local_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_local_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					bool useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$ = false;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_local_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation_local(gameObject_insideLocalSpace_of_$name$, customVectorToRotate_local_of_$name$, length_ofUpAndForwardVectors_local_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_local_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn EulerLocal</ToolTip>
					<Default>eulerLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEulerLocal_tr</Title>
			<Shortcut>drawEulerLocal_tr</Shortcut>
			<Description>Draw an EulerLocal in the Unity Editor. (of transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_insideLocalSpace_of_$name$ = $end$;
					Vector3 customVectorToRotate_local_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_local_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					bool useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$ = false;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_local_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation_local(transform_insideLocalSpace_of_$name$, customVectorToRotate_local_of_$name$, length_ofUpAndForwardVectors_local_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, useAnglesFromQuaternion_notFromEditorsTransformInspectorDisplay_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_local_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn EulerLocal</ToolTip>
					<Default>eulerLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEulerLocal_vec</Title>
			<Shortcut>drawEulerLocal_vec</Shortcut>
			<Description>Draw an EulerLocal in the Unity Editor. (of vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransform_thatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 eulerAnglesToDraw_local_of_$name$ = ;
					Vector3 posWhereToDraw_global_of_$name$ = default(Vector3);
					Vector3 customVectorToRotate_local_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_local_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_local_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation_local(parentTransform_thatDefinesTheLocalSpace_of_$name$, eulerAnglesToDraw_local_of_$name$, posWhereToDraw_global_of_$name$, customVectorToRotate_local_of_$name$, length_ofUpAndForwardVectors_local_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_local_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn EulerLocal</ToolTip>
					<Default>eulerLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawEulerLocal_quat</Title>
			<Shortcut>drawEulerLocal_quat</Shortcut>
			<Description>Draw an EulerLocal in the Unity Editor. (of quaternion)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransform_thatDefinesTheLocalSpace_of_$name$ = $end$;
					Quaternion quaternionToDrawAsEulerAngles_local_of_$name$ = ;
					Vector3 posWhereToDraw_global_of_$name$ = default(Vector3);
					Vector3 customVectorToRotate_local_of_$name$ = default(Vector3);
					float length_ofUpAndForwardVectors_local_of_$name$ = 0.0f;
					float alpha_ofSquareSpannedByForwardAndUp_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float alpha_ofUnrotatedGimbalAxes_of_$name$ = 0.06f;
					float gimbalSize_local_of_$name$ = 1.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = false;
					DrawEngineBasics.EulerRotation_local(parentTransform_thatDefinesTheLocalSpace_of_$name$, quaternionToDrawAsEulerAngles_local_of_$name$, posWhereToDraw_global_of_$name$, customVectorToRotate_local_of_$name$, length_ofUpAndForwardVectors_local_of_$name$, alpha_ofSquareSpannedByForwardAndUp_of_$name$, text_of_$name$, alpha_ofUnrotatedGimbalAxes_of_$name$, gimbalSize_local_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn EulerLocal</ToolTip>
					<Default>eulerLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBounds_go</Title>
			<Shortcut>drawBounds_go</Shortcut>
			<Description>Draw Bounds in the Unity Editor. (of mesh on gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					bool alsoDrawLocalBounds_of_$name$ = true;
					bool showAlsoBoundsOfChildren_of_$name$ = true;
					float linesWidth_of_$name$ = 0.01f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Bounds(gameObject_of_$name$, color_of_$name$, alsoDrawLocalBounds_of_$name$, showAlsoBoundsOfChildren_of_$name$, linesWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Bounds</ToolTip>
					<Default>bounds</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawLocalBounds_go</Title>
			<Shortcut>drawLocalBounds_go</Shortcut>
			<Description>Draw LocalBounds in the Unity Editor. (of mesh on gameobject)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					bool showAlsoBoundsOfChildren_of_$name$ = true;
					float lineWidth_inGlobalUnits_of_$name$ = 0.01f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.LocalBounds(gameObject_of_$name$, color_of_$name$, showAlsoBoundsOfChildren_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn LocalBounds</ToolTip>
					<Default>localBounds</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBounds_tr</Title>
			<Shortcut>drawBounds_tr</Shortcut>
			<Description>Draw Bounds in the Unity Editor. (of mesh on transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					bool alsoDrawLocalBounds_of_$name$ = true;
					bool showAlsoBoundsOfChildren_of_$name$ = true;
					float linesWidth_of_$name$ = 0.01f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Bounds(transform_of_$name$, color_of_$name$, alsoDrawLocalBounds_of_$name$, showAlsoBoundsOfChildren_of_$name$, linesWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Bounds</ToolTip>
					<Default>bounds</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawLocalBounds_tr</Title>
			<Shortcut>drawLocalBounds_tr</Shortcut>
			<Description>Draw LocalBounds in the Unity Editor. (of mesh on transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					bool showAlsoBoundsOfChildren_of_$name$ = true;
					float lineWidth_inGlobalUnits_of_$name$ = 0.01f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.LocalBounds(transform_of_$name$, color_of_$name$, showAlsoBoundsOfChildren_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn LocalBounds</ToolTip>
					<Default>localBounds</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBounds_b</Title>
			<Shortcut>drawBounds_b</Shortcut>
			<Description>Draw Bounds in the Unity Editor. (of bounds struct)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Bounds bounds_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float linesWidth_of_$name$ = 0.01f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Bounds(bounds_of_$name$, color_of_$name$, linesWidth_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Bounds</ToolTip>
					<Default>bounds</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawLocalBounds_b</Title>
			<Shortcut>drawLocalBounds_b</Shortcut>
			<Description>Draw LocalBounds in the Unity Editor. (of bounds struct)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Bounds localBounds_of_$name$ = $end$;
					Transform transformDefiningLocalSpace_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float lineWidth_inGlobalUnits_of_$name$ = 0.01f;
					string text_of_$name$ = null;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.LocalBounds(localBounds_of_$name$, transformDefiningLocalSpace_of_$name$, color_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn LocalBounds</ToolTip>
					<Default>localBounds</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawDotProduct</Title>
			<Shortcut>drawDotProduct</Shortcut>
			<Description>Draw a DotProduct in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 vector1_lhs_of_$name$ = $end$;
					Vector3 vector2_rhs_of_$name$ = ;
					Vector3 posWhereToDraw_of_$name$ = default(Vector3);
					float linesWidth_of_$name$ = 0.0025f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.DotProduct(vector1_lhs_of_$name$, vector2_rhs_of_$name$, posWhereToDraw_of_$name$, linesWidth_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn DotProduct</ToolTip>
					<Default>dotProduct</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCrossProduct</Title>
			<Shortcut>drawCrossProduct</Shortcut>
			<Description>Draw a CrossProduct in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 vector1_lhs_leftThumb_of_$name$ = $end$;
					Vector3 vector2_rhs_leftIndexFinger_of_$name$ = ;
					Vector3 posWhereToDraw_of_$name$ = default(Vector3);
					float linesWidth_of_$name$ = 0.0025f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CrossProduct(vector1_lhs_leftThumb_of_$name$, vector2_rhs_leftIndexFinger_of_$name$, posWhereToDraw_of_$name$, linesWidth_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CrossProduct</ToolTip>
					<Default>crossProduct</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawTagGameObject</Title>
			<Shortcut>drawTagGameObject</Shortcut>
			<Description>Draw TagGameObject in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					string text_of_$name$ = null;
					Color colorForText_of_$name$ = default(Color);
					Color colorForTagBox_of_$name$ = default(Color);
					float forceTextSize_of_$name$ = 0.0f;
					float linesWidth_of_$name$ = 0.0f;
					bool encapsulateChildren_of_$name$ = true;
					bool textBlockAboveLine_of_$name$ = false;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.TagGameObject(gameObject_of_$name$, text_of_$name$, colorForText_of_$name$, colorForTagBox_of_$name$, forceTextSize_of_$name$, linesWidth_of_$name$, encapsulateChildren_of_$name$, textBlockAboveLine_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn TagGameObject</ToolTip>
					<Default>tagGameObject</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawTagGameObjectScreenspace</Title>
			<Shortcut>drawTagGameObjectScreenspace</Shortcut>
			<Description>Draw TagGameObjectScreenspace in the Unity Editor. (automatic detection of target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_of_$name$ = $end$;
					string text_of_$name$ = null;
					Color colorForText_of_$name$ = default(Color);
					Color colorForTagBox_of_$name$ = default(Color);
					float linesWidth_relToViewportHeight_of_$name$ = 0.0f;
					bool drawPointerIfOffscreen_of_$name$ = true;
					float relTextSizeScaling_of_$name$ = 1.0f;
					bool encapsulateChildren_of_$name$ = true;
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.TagGameObjectScreenspace(gameObject_of_$name$, text_of_$name$, colorForText_of_$name$, colorForTagBox_of_$name$, linesWidth_relToViewportHeight_of_$name$, drawPointerIfOffscreen_of_$name$, relTextSizeScaling_of_$name$, encapsulateChildren_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn TagGameObjectScreenspace</ToolTip>
					<Default>tagGameObjectScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawTagGameObjectScreenspace_cam</Title>
			<Shortcut>drawTagGameObjectScreenspace_cam</Shortcut>
			<Description>Draw TagGameObjectScreenspace in the Unity Editor. (explicitly defining the target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Camera screenCamera_of_$name$ = $end$;
					GameObject gameObject_of_$name$ = ;
					string text_of_$name$ = null;
					Color colorForText_of_$name$ = default(Color);
					Color colorForTagBox_of_$name$ = default(Color);
					float linesWidth_relToViewportHeight_of_$name$ = 0.0f;
					bool drawPointerIfOffscreen_of_$name$ = true;
					float relTextSizeScaling_of_$name$ = 1.0f;
					bool encapsulateChildren_of_$name$ = true;
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.TagGameObjectScreenspace(screenCamera_of_$name$, gameObject_of_$name$, text_of_$name$, colorForText_of_$name$, colorForTagBox_of_$name$, linesWidth_relToViewportHeight_of_$name$, drawPointerIfOffscreen_of_$name$, relTextSizeScaling_of_$name$, encapsulateChildren_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn TagGameObjectScreenspace</ToolTip>
					<Default>tagGameObjectScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCamera_rotViaQuat</Title>
			<Shortcut>drawCamera_rotViaQuat</Shortcut>
			<Description>Draw a Camera in the Unity Editor. (the rotation is defined via quaternion)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 position_of_$name$ = $end$;
					Quaternion rotation_of_$name$ = default(Quaternion);
					Color color_of_$name$ = default(Color);
					string text_of_$name$ = null;
					float linesWidth_of_$name$ = 0.0f;
					float nearClipPlaneDistance_of_$name$ = 0.3f;
					float fieldOfViewAngleDeg_of_$name$ = 60.0f;
					float aspectRatioOfScreen_of_$name$ = 16.0f / 9.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Camera(position_of_$name$, rotation_of_$name$, color_of_$name$, text_of_$name$, linesWidth_of_$name$, nearClipPlaneDistance_of_$name$, fieldOfViewAngleDeg_of_$name$, aspectRatioOfScreen_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Camera</ToolTip>
					<Default>camera</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCamera_rotViaVec</Title>
			<Shortcut>drawCamera_rotViaVec</Shortcut>
			<Description>Draw a Camera in the Unity Editor. (the rotation is defined via vectors)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 position_of_$name$ = $end$;
					Vector3 forward_of_$name$ = default(Vector3);
					Vector3 up_of_$name$ = default(Vector3);
					Color color_of_$name$ = default(Color);
					string text_of_$name$ = null;
					float linesWidth_of_$name$ = 0.0f;
					float nearClipPlaneDistance_of_$name$ = 0.3f;
					float fieldOfViewAngleDeg_of_$name$ = 60.0f;
					float aspectRatioOfScreen_of_$name$ = 16.0f / 9.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Camera(position_of_$name$, forward_of_$name$, up_of_$name$, color_of_$name$, text_of_$name$, linesWidth_of_$name$, nearClipPlaneDistance_of_$name$, fieldOfViewAngleDeg_of_$name$, aspectRatioOfScreen_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Camera</ToolTip>
					<Default>camera</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCamera_cam</Title>
			<Shortcut>drawCamera_cam</Shortcut>
			<Description>Draw a Camera in the Unity Editor. (explicitly defining the visualized camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Camera camera_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					string text_of_$name$ = null;
					float linesWidth_of_$name$ = 0.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.Camera(camera_of_$name$, color_of_$name$, text_of_$name$, linesWidth_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn Camera</ToolTip>
					<Default>camera</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCamFrustum_rotViaQuat</Title>
			<Shortcut>drawCamFrustum_rotViaQuat</Shortcut>
			<Description>Draw a CamFrustum in the Unity Editor. (the rotation is defined via quaternion)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 position_ofCamera_of_$name$ = $end$;
					Quaternion rotation_ofCamera_of_$name$ = default(Quaternion);
					Color color_of_$name$ = default(Color);
					float nearClipPlaneDistance_of_$name$ = 0.3f;
					float farClipPlaneDistance_of_$name$ = 1000.0f;
					float fieldOfViewAngleDeg_of_$name$ = 60.0f;
					float aspectRatioOfScreen_of_$name$ = 16.0f / 9.0f;
					float alphaFactor_forBoundarySurfaceLines_of_$name$ = 0.18f;
					float linesWidth_ofEdges_of_$name$ = 0.0f;
					int linesPerBoundarySurface_of_$name$ = 60;
					string text_of_$name$ = null;
					bool forceTextOnNearPlaneUnmirroredTowardsCam_of_$name$ = true;
					Vector3 positionOnHighlightedPlane_of_$name$ = default(Vector3);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CameraFrustum(position_ofCamera_of_$name$, rotation_ofCamera_of_$name$, color_of_$name$, nearClipPlaneDistance_of_$name$, farClipPlaneDistance_of_$name$, fieldOfViewAngleDeg_of_$name$, aspectRatioOfScreen_of_$name$, alphaFactor_forBoundarySurfaceLines_of_$name$, linesWidth_ofEdges_of_$name$, linesPerBoundarySurface_of_$name$, text_of_$name$, forceTextOnNearPlaneUnmirroredTowardsCam_of_$name$, positionOnHighlightedPlane_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CamFrustum</ToolTip>
					<Default>camFrustum</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCamFrustum_rotViaVec</Title>
			<Shortcut>drawCamFrustum_rotViaVec</Shortcut>
			<Description>Draw a CamFrustum in the Unity Editor. (the rotation is defined via vectors)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 position_ofCamera_of_$name$ = $end$;
					Vector3 forward_ofCamera_of_$name$ = default(Vector3);
					Vector3 up_ofCamera_of_$name$ = default(Vector3);
					Color color_of_$name$ = default(Color);
					float nearClipPlaneDistance_of_$name$ = 0.3f;
					float farClipPlaneDistance_of_$name$ = 1000.0f;
					float fieldOfViewAngleDeg_of_$name$ = 60.0f;
					float aspectRatioOfScreen_of_$name$ = 16.0f / 9.0f;
					float alphaFactor_forBoundarySurfaceLines_of_$name$ = 0.18f;
					float linesWidth_ofEdges_of_$name$ = 0.0f;
					int linesPerBoundarySurface_of_$name$ = 60;
					string text_of_$name$ = null;
					bool forceTextOnNearPlaneUnmirroredTowardsCam_of_$name$ = true;
					Vector3 positionOnHighlightedPlane_of_$name$ = default(Vector3);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CameraFrustum(position_ofCamera_of_$name$, forward_ofCamera_of_$name$, up_ofCamera_of_$name$, color_of_$name$, nearClipPlaneDistance_of_$name$, farClipPlaneDistance_of_$name$, fieldOfViewAngleDeg_of_$name$, aspectRatioOfScreen_of_$name$, alphaFactor_forBoundarySurfaceLines_of_$name$, linesWidth_ofEdges_of_$name$, linesPerBoundarySurface_of_$name$, text_of_$name$, forceTextOnNearPlaneUnmirroredTowardsCam_of_$name$, positionOnHighlightedPlane_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CamFrustum</ToolTip>
					<Default>camFrustum</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCamFrustum_cam</Title>
			<Shortcut>drawCamFrustum_cam</Shortcut>
			<Description>Draw a CamFrustum in the Unity Editor. (explicitly defining the visualized camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Camera camera_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float alphaFactor_forBoundarySurfaceLines_of_$name$ = 0.18f;
					float linesWidth_ofEdges_of_$name$ = 0.0f;
					int linesPerBoundarySurface_of_$name$ = 60;
					string text_of_$name$ = null;
					bool forceTextOnNearPlaneUnmirroredTowardsCam_of_$name$ = true;
					Vector3 positionOnHighlightedPlane_of_$name$ = default(Vector3);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CameraFrustum(camera_of_$name$, color_of_$name$, alphaFactor_forBoundarySurfaceLines_of_$name$, linesWidth_ofEdges_of_$name$, linesPerBoundarySurface_of_$name$, text_of_$name$, forceTextOnNearPlaneUnmirroredTowardsCam_of_$name$, positionOnHighlightedPlane_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CamFrustum</ToolTip>
					<Default>camFrustum</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBoolDisplayer2D</Title>
			<Shortcut>drawBoolDisplayer2D</Shortcut>
			<Description>Draw a BoolDisplayer2D in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					bool boolValueToDisplay_of_$name$ = $end$;
					Vector2 position_of_$name$ = default(Vector2);
					string boolName_of_$name$ = null;
					float size_of_$name$ = 1.0f;
					float custom_zPos_of_$name$ = float.PositiveInfinity;
					Color color_forTextAndFrame_of_$name$ = default(Color);
					Color overwriteColor_forTrue_of_$name$ = default(Color);
					Color overwriteColor_forFalse_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.BoolDisplayer2D(boolValueToDisplay_of_$name$, position_of_$name$, boolName_of_$name$, size_of_$name$, custom_zPos_of_$name$, color_forTextAndFrame_of_$name$, overwriteColor_forTrue_of_$name$, overwriteColor_forFalse_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn BoolDisplayer2D</ToolTip>
					<Default>boolDisplayer2D</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBoolDisplayer</Title>
			<Shortcut>drawBoolDisplayer</Shortcut>
			<Description>Draw a BoolDisplayer in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					bool boolValueToDisplay_of_$name$ = $end$;
					Vector3 position_of_$name$ = default(Vector3);
					string boolName_of_$name$ = null;
					float size_of_$name$ = 1.0f;
					Quaternion rotation_of_$name$ = default(Quaternion);
					Color color_forTextAndFrame_of_$name$ = default(Color);
					Color overwriteColor_forTrue_of_$name$ = default(Color);
					Color overwriteColor_forFalse_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.BoolDisplayer(boolValueToDisplay_of_$name$, position_of_$name$, boolName_of_$name$, size_of_$name$, rotation_of_$name$, color_forTextAndFrame_of_$name$, overwriteColor_forTrue_of_$name$, overwriteColor_forFalse_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn BoolDisplayer</ToolTip>
					<Default>boolDisplayer</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBoolDisplayerScreenspace_3Dpos</Title>
			<Shortcut>drawBoolDisplayerScreenspace_3Dpos</Shortcut>
			<Description>Draw a BoolDisplayerScreenspace in the Unity Editor. (position defined in 3D worldspace) (automatic detection of target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					bool boolValueToDisplay_of_$name$ = $end$;
					string boolName_of_$name$ = ;
					Vector3 position_in3DWorldspace_of_$name$ = ;
					float size_relToViewportHeight_of_$name$ = 0.175f;
					Color color_forTextAndFrame_of_$name$ = default(Color);
					Color overwriteColor_forTrue_of_$name$ = default(Color);
					Color overwriteColor_forFalse_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.BoolDisplayerScreenspace(boolValueToDisplay_of_$name$, boolName_of_$name$, position_in3DWorldspace_of_$name$, size_relToViewportHeight_of_$name$, color_forTextAndFrame_of_$name$, overwriteColor_forTrue_of_$name$, overwriteColor_forFalse_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn BoolDisplayerScreenspace</ToolTip>
					<Default>boolDisplayerScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBoolDisplayerScreenspace_3Dpos_cam</Title>
			<Shortcut>drawBoolDisplayerScreenspace_3Dpos_cam</Shortcut>
			<Description>Draw a BoolDisplayerScreenspace in the Unity Editor. (position defined in 3D worldspace) (explicitly defining the target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Camera screenCamera_of_$name$ = $end$;
					bool boolValueToDisplay_of_$name$ = ;
					string boolName_of_$name$ = ;
					Vector3 position_in3DWorldspace_of_$name$ = ;
					float size_relToViewportHeight_of_$name$ = 0.175f;
					Color color_forTextAndFrame_of_$name$ = default(Color);
					Color overwriteColor_forTrue_of_$name$ = default(Color);
					Color overwriteColor_forFalse_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.BoolDisplayerScreenspace(screenCamera_of_$name$, boolValueToDisplay_of_$name$, boolName_of_$name$, position_in3DWorldspace_of_$name$, size_relToViewportHeight_of_$name$, color_forTextAndFrame_of_$name$, overwriteColor_forTrue_of_$name$, overwriteColor_forFalse_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn BoolDisplayerScreenspace</ToolTip>
					<Default>boolDisplayerScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBoolDisplayerScreenspace_2Dpos</Title>
			<Shortcut>drawBoolDisplayerScreenspace_2Dpos</Shortcut>
			<Description>Draw a BoolDisplayerScreenspace in the Unity Editor. (position defined in 2D screenspace) (automatic detection of target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					bool boolValueToDisplay_of_$name$ = $end$;
					string boolName_of_$name$ = null;
					Vector2 position_in2DViewportSpace_of_$name$ = default(Vector2);
					float size_relToViewportHeight_of_$name$ = 0.175f;
					Color color_forTextAndFrame_of_$name$ = default(Color);
					Color overwriteColor_forTrue_of_$name$ = default(Color);
					Color overwriteColor_forFalse_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.BoolDisplayerScreenspace(boolValueToDisplay_of_$name$, boolName_of_$name$, position_in2DViewportSpace_of_$name$, size_relToViewportHeight_of_$name$, color_forTextAndFrame_of_$name$, overwriteColor_forTrue_of_$name$, overwriteColor_forFalse_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn BoolDisplayerScreenspace</ToolTip>
					<Default>boolDisplayerScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawBoolDisplayerScreenspace_2Dpos_cam</Title>
			<Shortcut>drawBoolDisplayerScreenspace_2Dpos_cam</Shortcut>
			<Description>Draw a BoolDisplayerScreenspace in the Unity Editor. (position defined in 2D screenspace) (explicitly defining the target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Camera screenCamera_of_$name$ = $end$;
					bool boolValueToDisplay_of_$name$ = ;
					string boolName_of_$name$ = null;
					Vector2 position_in2DViewportSpace_of_$name$ = default(Vector2);
					float size_relToViewportHeight_of_$name$ = 0.175f;
					Color color_forTextAndFrame_of_$name$ = default(Color);
					Color overwriteColor_forTrue_of_$name$ = default(Color);
					Color overwriteColor_forFalse_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.BoolDisplayerScreenspace(screenCamera_of_$name$, boolValueToDisplay_of_$name$, boolName_of_$name$, position_in2DViewportSpace_of_$name$, size_relToViewportHeight_of_$name$, color_forTextAndFrame_of_$name$, overwriteColor_forTrue_of_$name$, overwriteColor_forFalse_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn BoolDisplayerScreenspace</ToolTip>
					<Default>boolDisplayerScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawRayLineExtended_ray</Title>
			<Shortcut>drawRayLineExtended_ray</Shortcut>
			<Description>Draw a RayLineExtended in the Unity Editor. (defined by ray)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Ray ray_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float width_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float forceFixedConeLength_of_$name$ = 0.0f;
					bool addNormalizedMarkingText_of_$name$ = true;
					float enlargeSmallTextToThisMinTextSize_of_$name$ = 0.005f;
					float extentionLength_of_$name$ = 1000.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.RayLineExtended(ray_of_$name$, color_of_$name$, width_of_$name$, text_of_$name$, forceFixedConeLength_of_$name$, addNormalizedMarkingText_of_$name$, enlargeSmallTextToThisMinTextSize_of_$name$, extentionLength_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn RayLineExtended</ToolTip>
					<Default>rayLineExtended</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawRayLineExtended_vec</Title>
			<Shortcut>drawRayLineExtended_vec</Shortcut>
			<Description>Draw a RayLineExtended in the Unity Editor. (defined by vectors)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 rayOrigin_of_$name$ = $end$;
					Vector3 rayDirection_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float width_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float forceFixedConeLength_of_$name$ = 0.0f;
					bool addNormalizedMarkingText_of_$name$ = true;
					float enlargeSmallTextToThisMinTextSize_of_$name$ = 0.005f;
					float extentionLength_of_$name$ = 1000.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.RayLineExtended(rayOrigin_of_$name$, rayDirection_of_$name$, color_of_$name$, width_of_$name$, text_of_$name$, forceFixedConeLength_of_$name$, addNormalizedMarkingText_of_$name$, enlargeSmallTextToThisMinTextSize_of_$name$, extentionLength_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn RayLineExtended</ToolTip>
					<Default>rayLineExtended</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawRayLineExtended2D_ray</Title>
			<Shortcut>drawRayLineExtended2D_ray</Shortcut>
			<Description>Draw a RayLineExtended2D in the Unity Editor. (defined by ray)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Ray2D ray_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float width_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float custom_zPos_of_$name$ = float.PositiveInfinity;
					float forceFixedConeLength_of_$name$ = 0.0f;
					bool addNormalizedMarkingText_of_$name$ = true;
					float enlargeSmallTextToThisMinTextSize_of_$name$ = 0.005f;
					float extentionLength_of_$name$ = 1000.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.RayLineExtended2D(ray_of_$name$, color_of_$name$, width_of_$name$, text_of_$name$, custom_zPos_of_$name$, forceFixedConeLength_of_$name$, addNormalizedMarkingText_of_$name$, enlargeSmallTextToThisMinTextSize_of_$name$, extentionLength_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn RayLineExtended2D</ToolTip>
					<Default>rayLineExtended2D</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawRayLineExtended2D_vec</Title>
			<Shortcut>drawRayLineExtended2D_vec</Shortcut>
			<Description>Draw a RayLineExtended2D in the Unity Editor. (defined by vectors)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector2 rayOrigin_of_$name$ = $end$;
					Vector2 rayDirection_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float width_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					float custom_zPos_of_$name$ = float.PositiveInfinity;
					float forceFixedConeLength_of_$name$ = 0.0f;
					bool addNormalizedMarkingText_of_$name$ = true;
					float enlargeSmallTextToThisMinTextSize_of_$name$ = 0.005f;
					float extentionLength_of_$name$ = 1000.0f;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.RayLineExtended2D(rayOrigin_of_$name$, rayDirection_of_$name$, color_of_$name$, width_of_$name$, text_of_$name$, custom_zPos_of_$name$, forceFixedConeLength_of_$name$, addNormalizedMarkingText_of_$name$, enlargeSmallTextToThisMinTextSize_of_$name$, extentionLength_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn RayLineExtended2D</ToolTip>
					<Default>rayLineExtended2D</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawRayLineExtendedScreenspace</Title>
			<Shortcut>drawRayLineExtendedScreenspace</Shortcut>
			<Description>Draw a RayLineExtendedScreenspace in the Unity Editor. (automatic detection of target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector2 rayOrigin_of_$name$ = $end$;
					Vector2 rayDirection_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float width_relToViewportHeight_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					bool interpretDirectionAsUnwarped_of_$name$ = false;
					float coneLength_relToViewportHeight_of_$name$ = 0.05f;
					bool displayDistanceOutsideScreenBorder_of_$name$ = true;
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.RayLineExtendedScreenspace(rayOrigin_of_$name$, rayDirection_of_$name$, color_of_$name$, width_relToViewportHeight_of_$name$, text_of_$name$, interpretDirectionAsUnwarped_of_$name$, coneLength_relToViewportHeight_of_$name$, displayDistanceOutsideScreenBorder_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn RayLineExtendedScreenspace</ToolTip>
					<Default>rayLineExtendedScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawRayLineExtendedScreenspace_cam</Title>
			<Shortcut>drawRayLineExtendedScreenspace_cam</Shortcut>
			<Description>Draw a RayLineExtendedScreenspace in the Unity Editor. (explicitly defining the target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Camera screenCamera_of_$name$ = $end$;
					Vector2 rayOrigin_of_$name$ = ;
					Vector2 rayDirection_of_$name$ = ;
					Color color_of_$name$ = default(Color);
					float width_relToViewportHeight_of_$name$ = 0.0f;
					string text_of_$name$ = null;
					bool interpretDirectionAsUnwarped_of_$name$ = false;
					float coneLength_relToViewportHeight_of_$name$ = 0.05f;
					bool displayDistanceOutsideScreenBorder_of_$name$ = true;
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.RayLineExtendedScreenspace(screenCamera_of_$name$, rayOrigin_of_$name$, rayDirection_of_$name$, color_of_$name$, width_relToViewportHeight_of_$name$, text_of_$name$, interpretDirectionAsUnwarped_of_$name$, coneLength_relToViewportHeight_of_$name$, displayDistanceOutsideScreenBorder_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn RayLineExtendedScreenspace</ToolTip>
					<Default>rayLineExtendedScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCoordinateAxesGizmo</Title>
			<Shortcut>drawCoordinateAxesGizmo</Shortcut>
			<Description>Draw a CoordinateAxesGizmo in the Unity Editor. </Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 position_of_$name$ = $end$;
					float lengthPerAxis_of_$name$ = 1.0f;
					float linesWidth_of_$name$ = 0.025f;
					string text_of_$name$ = null;
					bool drawXYZchars_of_$name$ = true;
					bool skipConeDrawing_of_$name$ = false;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CoordinateAxesGizmo(position_of_$name$, lengthPerAxis_of_$name$, linesWidth_of_$name$, text_of_$name$, drawXYZchars_of_$name$, skipConeDrawing_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CoordinateAxesGizmo</ToolTip>
					<Default>coordinateAxesGizmo</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCoordinateAxesGizmoLocal_go</Title>
			<Shortcut>drawCoordinateAxesGizmoLocal_go</Shortcut>
			<Description>Draw a CoordinateAxesGizmoLocal in the Unity Editor. (local space is defined by gameobject as parent)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					GameObject gameObject_whoseLocalSpaceIsDisplayed_of_$name$ = $end$;
					float forceAllAxesLength_of_$name$ = 0.0f;
					float lineWidth_inGlobalUnits_of_$name$ = 0.025f;
					string text_of_$name$ = null;
					bool drawXYZchars_of_$name$ = true;
					bool skipConeDrawing_of_$name$ = false;
					bool skipWarningForNonUniformParentScale_of_$name$ = false;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CoordinateAxesGizmoLocal(gameObject_whoseLocalSpaceIsDisplayed_of_$name$, forceAllAxesLength_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, drawXYZchars_of_$name$, skipConeDrawing_of_$name$, skipWarningForNonUniformParentScale_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CoordinateAxesGizmoLocal</ToolTip>
					<Default>coordinateAxesGizmoLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCoordinateAxesGizmoLocal_tr</Title>
			<Shortcut>drawCoordinateAxesGizmoLocal_tr</Shortcut>
			<Description>Draw a CoordinateAxesGizmoLocal in the Unity Editor. (local space is defined by transform as parent)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transform_whoseLocalSpaceIsDisplayed_of_$name$ = $end$;
					float forceAllAxesLength_of_$name$ = 0.0f;
					float lineWidth_inGlobalUnits_of_$name$ = 0.025f;
					string text_of_$name$ = null;
					bool drawXYZchars_of_$name$ = true;
					bool skipConeDrawing_of_$name$ = false;
					bool skipWarningForNonUniformParentScale_of_$name$ = false;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CoordinateAxesGizmoLocal(transform_whoseLocalSpaceIsDisplayed_of_$name$, forceAllAxesLength_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, drawXYZchars_of_$name$, skipConeDrawing_of_$name$, skipWarningForNonUniformParentScale_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CoordinateAxesGizmoLocal</ToolTip>
					<Default>coordinateAxesGizmoLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawCoordinateAxesGizmoLocal_vecQuat</Title>
			<Shortcut>drawCoordinateAxesGizmoLocal_vecQuat</Shortcut>
			<Description>Draw a CoordinateAxesGizmoLocal in the Unity Editor. (local space is defined via vectors and quaternion)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 position_OfLocalCoordinateSystem_of_$name$ = $end$;
					Quaternion rotation_OfLocalCoordinateSystem_of_$name$ = ;
					Vector3 scale_OfLocalCoordinateSystem_of_$name$ = default(Vector3);
					float forceAllAxesLength_of_$name$ = 0.0f;
					float lineWidth_inGlobalUnits_of_$name$ = 0.025f;
					string text_of_$name$ = null;
					bool drawXYZchars_of_$name$ = true;
					bool skipConeDrawing_of_$name$ = false;
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.CoordinateAxesGizmoLocal(position_OfLocalCoordinateSystem_of_$name$, rotation_OfLocalCoordinateSystem_of_$name$, scale_OfLocalCoordinateSystem_of_$name$, forceAllAxesLength_of_$name$, lineWidth_inGlobalUnits_of_$name$, text_of_$name$, drawXYZchars_of_$name$, skipConeDrawing_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn CoordinateAxesGizmoLocal</ToolTip>
					<Default>coordinateAxesGizmoLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridPlanes_tr</Title>
			<Shortcut>drawGridPlanes_tr</Shortcut>
			<Description>Draw GridPlanes in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridPlanes(transformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridPlanes</ToolTip>
					<Default>gridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridPlanes_vec</Title>
			<Shortcut>drawGridPlanes_vec</Shortcut>
			<Description>Draw GridPlanes in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridPlanes(positionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridPlanes</ToolTip>
					<Default>gridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridPlanes_tr</Title>
			<Shortcut>drawXGridPlanes_tr</Shortcut>
			<Description>Draw XGridPlanes in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridPlanes(transformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridPlanes</ToolTip>
					<Default>xGridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridPlanes_vec</Title>
			<Shortcut>drawXGridPlanes_vec</Shortcut>
			<Description>Draw XGridPlanes in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridPlanes(positionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridPlanes</ToolTip>
					<Default>xGridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridPlanes_tr</Title>
			<Shortcut>drawYGridPlanes_tr</Shortcut>
			<Description>Draw YGridPlanes in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridPlanes(transformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridPlanes</ToolTip>
					<Default>yGridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridPlanes_vec</Title>
			<Shortcut>drawYGridPlanes_vec</Shortcut>
			<Description>Draw YGridPlanes in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridPlanes(positionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridPlanes</ToolTip>
					<Default>yGridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridPlanes_tr</Title>
			<Shortcut>drawZGridPlanes_tr</Shortcut>
			<Description>Draw ZGridPlanes in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridPlanes(transformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridPlanes</ToolTip>
					<Default>zGridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridPlanes_vec</Title>
			<Shortcut>drawZGridPlanes_vec</Shortcut>
			<Description>Draw ZGridPlanes in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridPlanes(positionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridPlanes</ToolTip>
					<Default>zGridPlanes</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridPlanesLocal_parentSpace_trPos</Title>
			<Shortcut>drawGridPlanesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw GridPlanesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridPlanesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridPlanesLocal</ToolTip>
					<Default>gridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridPlanesLocal_trSpace_vecPos</Title>
			<Shortcut>drawGridPlanesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw GridPlanesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridPlanesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridPlanesLocal</ToolTip>
					<Default>gridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridPlanesLocal_parentSpace_trPos</Title>
			<Shortcut>drawXGridPlanesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw XGridPlanesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridPlanesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridPlanesLocal</ToolTip>
					<Default>xGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridPlanesLocal_trSpace_vecPos</Title>
			<Shortcut>drawXGridPlanesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw XGridPlanesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridPlanesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridPlanesLocal</ToolTip>
					<Default>xGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridPlanesLocal_parentSpace_trPos</Title>
			<Shortcut>drawYGridPlanesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw YGridPlanesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridPlanesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridPlanesLocal</ToolTip>
					<Default>yGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridPlanesLocal_trSpace_vecPos</Title>
			<Shortcut>drawYGridPlanesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw YGridPlanesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridPlanesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridPlanesLocal</ToolTip>
					<Default>yGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridPlanesLocal_parentSpace_trPos</Title>
			<Shortcut>drawZGridPlanesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw ZGridPlanesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridPlanesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridPlanesLocal</ToolTip>
					<Default>zGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridPlanesLocal_trSpace_vecPos</Title>
			<Shortcut>drawZGridPlanesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw ZGridPlanesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridPlanesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridPlanesLocal</ToolTip>
					<Default>zGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridPlanesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawGridPlanesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw GridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridPlanesLocal</ToolTip>
					<Default>gridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridPlanesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawGridPlanesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw GridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridPlanesLocal</ToolTip>
					<Default>gridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridPlanesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawXGridPlanesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw XGridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridPlanesLocal</ToolTip>
					<Default>xGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridPlanesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawXGridPlanesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw XGridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridPlanesLocal</ToolTip>
					<Default>xGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridPlanesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawYGridPlanesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw YGridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridPlanesLocal</ToolTip>
					<Default>yGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridPlanesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawYGridPlanesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw YGridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridPlanesLocal</ToolTip>
					<Default>yGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridPlanesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawZGridPlanesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw ZGridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridPlanesLocal</ToolTip>
					<Default>zGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridPlanesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawZGridPlanesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw ZGridPlanesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float drawDensity_of_$name$ = 1.0f;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = false;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridPlanesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, extentOfEachGridPlane_rel_inLocalSpaceUnits_of_$name$, drawDensity_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridPlanesLocal</ToolTip>
					<Default>zGridPlanesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridLines_tr</Title>
			<Shortcut>drawGridLines_tr</Shortcut>
			<Description>Draw GridLines in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_ofXLines_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					DrawEngineBasics.YGridLinesOrientation orientation_ofYLines_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					DrawEngineBasics.ZGridLinesOrientation orientation_ofZLines_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridLines(transformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_ofXLines_of_$name$, orientation_ofYLines_of_$name$, orientation_ofZLines_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridLines</ToolTip>
					<Default>gridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridLines_vec</Title>
			<Shortcut>drawGridLines_vec</Shortcut>
			<Description>Draw GridLines in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_ofXLines_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					DrawEngineBasics.YGridLinesOrientation orientation_ofYLines_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					DrawEngineBasics.ZGridLinesOrientation orientation_ofZLines_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridLines(positionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_ofXLines_of_$name$, orientation_ofYLines_of_$name$, orientation_ofZLines_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridLines</ToolTip>
					<Default>gridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridLines_tr</Title>
			<Shortcut>drawXGridLines_tr</Shortcut>
			<Description>Draw XGridLines in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridLines(transformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridLines</ToolTip>
					<Default>xGridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridLines_vec</Title>
			<Shortcut>drawXGridLines_vec</Shortcut>
			<Description>Draw XGridLines in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridLines(positionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridLines</ToolTip>
					<Default>xGridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridLines_tr</Title>
			<Shortcut>drawYGridLines_tr</Shortcut>
			<Description>Draw YGridLines in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.YGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridLines(transformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridLines</ToolTip>
					<Default>yGridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridLines_vec</Title>
			<Shortcut>drawYGridLines_vec</Shortcut>
			<Description>Draw YGridLines in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.YGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridLines(positionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridLines</ToolTip>
					<Default>yGridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridLines_tr</Title>
			<Shortcut>drawZGridLines_tr</Shortcut>
			<Description>Draw ZGridLines in the Unity Editor. (around transform's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform transformAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.ZGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridLines(transformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridLines</ToolTip>
					<Default>zGridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridLines_vec</Title>
			<Shortcut>drawZGridLines_vec</Shortcut>
			<Description>Draw ZGridLines in the Unity Editor. (around vector's position)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 positionAroundWhichToDraw_of_$name$ = $end$;
					float coveredGridUnits_rel_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_of_$name$ = 10.0f;
					float linesWidth_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.ZGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridLines(positionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_of_$name$, lengthOfEachGridLine_rel_of_$name$, linesWidth_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridLines</ToolTip>
					<Default>zGridLines</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridLinesLocal_parentSpace_trPos</Title>
			<Shortcut>drawGridLinesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw GridLinesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_ofXLines_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					DrawEngineBasics.YGridLinesOrientation orientation_ofYLines_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					DrawEngineBasics.ZGridLinesOrientation orientation_ofZLines_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridLinesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_ofXLines_of_$name$, orientation_ofYLines_of_$name$, orientation_ofZLines_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridLinesLocal</ToolTip>
					<Default>gridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridLinesLocal_trSpace_vecPos</Title>
			<Shortcut>drawGridLinesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw GridLinesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_ofXLines_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					DrawEngineBasics.YGridLinesOrientation orientation_ofYLines_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					DrawEngineBasics.ZGridLinesOrientation orientation_ofZLines_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridLinesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_ofXLines_of_$name$, orientation_ofYLines_of_$name$, orientation_ofZLines_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridLinesLocal</ToolTip>
					<Default>gridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridLinesLocal_parentSpace_trPos</Title>
			<Shortcut>drawXGridLinesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw XGridLinesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridLinesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridLinesLocal</ToolTip>
					<Default>xGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridLinesLocal_trSpace_vecPos</Title>
			<Shortcut>drawXGridLinesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw XGridLinesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridLinesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridLinesLocal</ToolTip>
					<Default>xGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridLinesLocal_parentSpace_trPos</Title>
			<Shortcut>drawYGridLinesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw YGridLinesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.YGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridLinesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridLinesLocal</ToolTip>
					<Default>yGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridLinesLocal_trSpace_vecPos</Title>
			<Shortcut>drawYGridLinesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw YGridLinesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.YGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridLinesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridLinesLocal</ToolTip>
					<Default>yGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridLinesLocal_parentSpace_trPos</Title>
			<Shortcut>drawZGridLinesLocal_parentSpace_trPos</Shortcut>
			<Description>Draw ZGridLinesLocal in the Unity Editor. (local space from transfrom parent, position from transfrom itself)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform childTransformAroundWhichToDrawGridOfParent_of_$name$ = $end$;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.ZGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridLinesLocal(childTransformAroundWhichToDrawGridOfParent_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridLinesLocal</ToolTip>
					<Default>zGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridLinesLocal_trSpace_vecPos</Title>
			<Shortcut>drawZGridLinesLocal_trSpace_vecPos</Shortcut>
			<Description>Draw ZGridLinesLocal in the Unity Editor. (local space from transfrom, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Transform parentTransformThatDefinesTheLocalSpace_of_$name$ = $end$;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.ZGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridLinesLocal(parentTransformThatDefinesTheLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridLinesLocal</ToolTip>
					<Default>zGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridLinesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawGridLinesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw GridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_ofXLines_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					DrawEngineBasics.YGridLinesOrientation orientation_ofYLines_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					DrawEngineBasics.ZGridLinesOrientation orientation_ofZLines_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_ofXLines_of_$name$, orientation_ofYLines_of_$name$, orientation_ofZLines_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridLinesLocal</ToolTip>
					<Default>gridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridLinesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawGridLinesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw GridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_ofXLines_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					DrawEngineBasics.YGridLinesOrientation orientation_ofYLines_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					DrawEngineBasics.ZGridLinesOrientation orientation_ofZLines_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColorForX_of_$name$ = default(Color);
					Color overwriteColorForY_of_$name$ = default(Color);
					Color overwriteColorForZ_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.GridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_ofXLines_of_$name$, orientation_ofYLines_of_$name$, orientation_ofZLines_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColorForX_of_$name$, overwriteColorForY_of_$name$, overwriteColorForZ_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridLinesLocal</ToolTip>
					<Default>gridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridLinesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawXGridLinesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw XGridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridLinesLocal</ToolTip>
					<Default>xGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawXGridLinesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawXGridLinesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw XGridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.XGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.XGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.XGridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn XGridLinesLocal</ToolTip>
					<Default>xGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridLinesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawYGridLinesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw YGridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.YGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridLinesLocal</ToolTip>
					<Default>yGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawYGridLinesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawYGridLinesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw YGridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.YGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.YGridLinesOrientation.alongX;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.YGridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn YGridLinesLocal</ToolTip>
					<Default>yGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridLinesLocal_vecQuatSpace_trPos</Title>
			<Shortcut>drawZGridLinesLocal_vecQuatSpace_trPos</Shortcut>
			<Description>Draw ZGridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from transform)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Transform childTransformAroundWhichToDraw_of_$name$ = ;
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.ZGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, childTransformAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridLinesLocal</ToolTip>
					<Default>zGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawZGridLinesLocal_vecQuatSpace_vecPos</Title>
			<Shortcut>drawZGridLinesLocal_vecQuatSpace_vecPos</Shortcut>
			<Description>Draw ZGridLinesLocal in the Unity Editor. (local space from vectors+quaternion, position from vector)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Vector3 originOfLocalSpace_of_$name$ = $end$;
					Vector3 scaleOfLocalSpace_of_$name$ = ;
					Quaternion rotationOfLocalSpace_of_$name$ = ;
					Vector3 localPositionAroundWhichToDraw_of_$name$ = default(Vector3);
					float coveredGridUnits_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$ = 10.0f;
					float linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$ = 0.0f;
					DrawEngineBasics.ZGridLinesOrientation orientation_of_$name$ = DrawEngineBasics.ZGridLinesOrientation.alongY;
					bool draw1000grid_of_$name$ = false;
					bool draw100grid_of_$name$ = false;
					bool draw10grid_of_$name$ = false;
					bool draw1grid_of_$name$ = true;
					bool draw0p1grid_of_$name$ = true;
					bool draw0p01grid_of_$name$ = false;
					bool draw0p001grid_of_$name$ = false;
					float distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$ = 20.0f;
					Color overwriteColor_of_$name$ = default(Color);
					float durationInSec_of_$name$ = 0.0f;
					bool hiddenByNearerObjects_of_$name$ = true;
					DrawEngineBasics.ZGridLinesLocal(originOfLocalSpace_of_$name$, scaleOfLocalSpace_of_$name$, rotationOfLocalSpace_of_$name$, localPositionAroundWhichToDraw_of_$name$, coveredGridUnits_rel_inLocalSpaceUnits_of_$name$, lengthOfEachGridLine_rel_inLocalSpaceUnits_of_$name$, linesWidth_inLocalSpaceUnits_signFlipsPerp_of_$name$, orientation_of_$name$, draw1000grid_of_$name$, draw100grid_of_$name$, draw10grid_of_$name$, draw1grid_of_$name$, draw0p1grid_of_$name$, draw0p01grid_of_$name$, draw0p001grid_of_$name$, distanceBetweenRepeatingCoordsTexts_relToGridDistance_of_$name$, overwriteColor_of_$name$, durationInSec_of_$name$, hiddenByNearerObjects_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn ZGridLinesLocal</ToolTip>
					<Default>zGridLinesLocal</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridScreenspace</Title>
			<Shortcut>drawGridScreenspace</Shortcut>
			<Description>Draw GridScreenspace in the Unity Editor. (automatic detection of target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Color color_of_$name$ = default(Color);$end$
					float linesWidth_relToViewportHeight_of_$name$ = 0.0f;
					bool drawTenthLines_of_$name$ = true;
					bool drawHundredthLines_of_$name$ = true;
					DrawEngineBasics.GridScreenspaceMode gridScreenspaceMode_of_$name$ = DrawEngineBasics.GridScreenspaceMode.warpWidthAndHeightIndividuallyToFitScreenInBothAxes;
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.GridScreenspace(color_of_$name$, linesWidth_relToViewportHeight_of_$name$, drawTenthLines_of_$name$, drawHundredthLines_of_$name$, gridScreenspaceMode_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridScreenspace</ToolTip>
					<Default>gridScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>drawGridScreenspace_cam</Title>
			<Shortcut>drawGridScreenspace_cam</Shortcut>
			<Description>Draw GridScreenspace in the Unity Editor. (explicitly defining the target camera)</Description>
			<Author>Draw XXL</Author>
		</Header>
		<Snippet>
			<Code Language="csharp">
				<![CDATA[
					Camera camera_of_$name$ = $end$;
					Color color_of_$name$ = default(Color);
					float linesWidth_relToViewportHeight_of_$name$ = 0.0f;
					bool drawTenthLines_of_$name$ = true;
					bool drawHundredthLines_of_$name$ = true;
					DrawEngineBasics.GridScreenspaceMode gridScreenspaceMode_of_$name$ = DrawEngineBasics.GridScreenspaceMode.warpWidthAndHeightIndividuallyToFitScreenInBothAxes;
					float durationInSec_of_$name$ = 0.0f;
					DrawEngineBasics.GridScreenspace(camera_of_$name$, color_of_$name$, linesWidth_relToViewportHeight_of_$name$, drawTenthLines_of_$name$, drawHundredthLines_of_$name$, gridScreenspaceMode_of_$name$, durationInSec_of_$name$);
				]]>
			</Code>
			<Imports>
				<Import>
					<Namespace>DrawXXL</Namespace>
				</Import>
			</Imports>
			<Declarations>
				<Literal>
					<ID>name</ID>
					<ToolTip>Name of drawn GridScreenspace</ToolTip>
					<Default>gridScreenspace</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	
	</CodeSnippets>
